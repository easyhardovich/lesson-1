# Ваше завдання — написати програму, яка переводить число у формат часу у читальному вигляді.
# Користувач повинен ввести число більше або дорівнює 0 і менше ніж 8640000.
# Число, яке є кількістю секунд, необхідно перевести в дні, години, хвилини та секунди.
# Ну і додатковим завданням є турбота про виведення.
# Слово "день" підбирається на основі кількості днів, а години, хвилини і секунди повинні заповнюватися нулями при одноцифрових значеннях.
# Підказка: одна хвилина - 60 сек. , В одній годині 60 * 60 сек, в одній добі 24 * 60 * 60 сек. Тобто використовуючи
# функцію divmod або методи поділу // і % вам необхідно знайти відповідну кількість днів, годин, хвилин, а те що залишиться - це секунди, які менше 60 ;)
# Доповнити провідними нулями можна за допомогою методу zfill(2)
# 0 -> 0 днів, 00:00:00
# 224930 -> 2 дні, 14:28:50
# 466289 -> 5 днів, 09:31:29
# 950400 -> 11 днів, 00:00:00
# 1209600 -> 14 днів, 00:00:00
# 1900800 - > 22 дні, 00:00:00
# 8639999 -> 99 днів, 23:59:59
# 22493 -> 0 днів, 06:14:53
# 7948799 -> 91 день, 23:59:59

#словник з формою слова "день"
days_in_str = {1: "днів", 2: "день", 3: "дні"}
# цикл для повторного введення числа при не потраплянні в діапазон
while 1:
    number = int(input("Enter number from 0 to 8640000: "))
    if 0 <= number < 8640000:
        days = number // (24 * 60 * 60)
        hours = number % (24 * 60 * 60) // (60 * 60)
        minutes = (number - (days * 24 * 60 * 60 + hours * 60 * 60)) // 60
        seconds = number % 60
        #визначаємо яку форму слова "день" взяти для відображення зі словника
        if days % 10 == 1 and days != 11:
            what_day = 2
        elif 2 <= days % 10 <= 4 and not 12 <= days <= 14:
            what_day = 3
        else:
            what_day = 1
        #виводимо результат
        print(f"{days} {days_in_str[what_day]}, {str(hours).zfill(2)}:{str(minutes).zfill(2)}:{str(seconds).zfill(2)}")
        break
    else:
        print("Wrong number")
        continue